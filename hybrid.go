package sortcomparison

const (
	hybridInsertionThreshold = 32
	countingSortRangeLimit   = 1 << 16
)

// HybridSort analyzes the distribution of integers in arr and applies
// different algorithms: insertion sort for small arrays, counting sort
// for small ranges, and a parallel radix sort as a default.
//
// generated by Claude 3.5 Sonnet
// prompt: implement the best sorting algorithm, it may combine multiple algorithms
func HybridSort(arr []int) {
	nLen := len(arr)
	if nLen < 2 {
		return
	}

	// Analyze array to decide.
	minVal, maxVal := MinMaxValue(arr)
	range_ := maxVal - minVal + 1

	// If very small, use insertion sort.
	if nLen < hybridInsertionThreshold {
		insertionSort(arr)

		return
	}

	// If range is small enough, counting sort.
	if range_ < countingSortRangeLimit && range_ <= nLen*4 {
		countingSort(arr, minVal, range_)

		return
	}

	// Otherwise, default to a parallel LSD radix sort.
	RadixSortLSD(arr)
}
